Recommended Server Setup:
Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-47-generic x86_64)

requirements:
	- mongodb (db version v3.6.3 or higher)
	- node (v8.15.1 or higher)
	- pm2 
	- git
	- R (R version 3.4.4 or higher)
	- python (Version 3.6 or higher)
	- redis (Redis server v=4.0.9 or higher)
	
install learning locker
	- for instructions see http://docs.learninglocker.net/guides-custom-installation/ (backup: "/misc/Learning Locker Documentation.html)
	

	
install python backend (https://github.com/IKARion/ikarion_data_infrastructure.git)
	- checkout from git
	
	- add "config.py" to "/ikarion_data_infrastructure/ikarion_data_management"
		example config:
		
***
from apscheduler.jobstores.mongodb import MongoDBJobStore
from apscheduler.jobstores.memory import MemoryJobStore
class Config(object):
    DEBUG = False
    TESTING = False
    MONGO_URI = "mongodb://ikarion:ikariondb@cluster0-shard-00-00-n3pml.mongodb.net:27017,cluster0-shard-00-01-n3pml.mongodb.net:27017,cluster0-shard-00-02-n3pml.mongodb.net:27017/db2?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin"
    LRS_URL = "<redacted>"
    KEY = "<redacted>"
    SECRET = "<redacted>"
    XPERIENCE_API_VERSION = "1.0.3"
    SCHEDULER_JOBSTORES = {
        'default': MongoDBJobStore(),
    }
    SCHEDULER_EXECUTORS = {
        'default': {'type': 'threadpool', 'max_workers': 20}
    }
    SCHEDULER_EXECUTORS_PROCESSPOOL = {
        'type': 'processpool',
        'max_workers': '5'
    }
    SCHEDULER_JOB_DEFAULTS = {
        'coalesce': False,
        'max_instances': 3
    }
    SCHEDULER = {
        'timezone': 'UTC'
    }
    RSCRIPT = "Rscript"

class ProductionConfig(Config):
    MONGO_URI = "mongodb://127.0.0.1:27017/ikarion"
    SCHEDULER_JOBSTORES = {
        'default': MongoDBJobStore(),
    }

class DevelopmentConfig(Config):
    DEBUG = True
    SCHEDULER_JOBSTORES = {
        'default': MemoryJobStore(),
    }
    MONGO_URI = "mongodb://ikarion:ikariondb@cluster0-shard-00-00-n3pml.mongodb.net:27017,cluster0-shard-00-01-n3pml.mongodb.net:27017,cluster0-shard-00-02-n3pml.mongodb.net:27017/db2?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin"

class TestingConfig(Config):
    TESTING = True

***

	- create venv:
		$ python3 -m venv venv
		
	- acvivate venv
		$ /venv/bin$ source activate
		
	- instll necessary requirements
		$ pip install -r requirements.txt
		
	- deactivate venv
		$ deactivate
		
to start the analysis backend process with pm2: 
	$ pm2 start ikarion_data_infrastructure/ikarion_data_management/start_server.sh
	
	
install analysis r dashboard (https://github.com/IKARion/ikarion_analytics_dashboard)

	- checkout from git

	- add "config.R" to "/ikarion_analytics_dashboard/dashboard" 

		example config:
***
appConfig <- list(
  xpsEndpoint = "<redacted>",
  managementEndpoint = "http://localhost:5000/management",
  dataEndpoint = "http://localhost:5000"
  #dataEndpoint = "<redacted>"
)
***

	- if the xps endpoint (bridge + interventionsystem) changes the variable "xpsEndpoint" needs to be adjusted accordingly
	
	- start R and install necessary libraries
		$ sudo R
		then run /ikarion_analytics_dashboard/dashboard/setup.R in R shell

		
	- install all dependencies, if necessary
		(httr, DT package, caret, e1071, ranger, ...)
		
	- start the dashboard with pm2
		$ pm2 start --interpreter="Rscript" ikarion_analytics_dashboard/runDashboard.R
